-- MySQL Script generated by MySQL Workbench
-- Fri Dec 10 21:44:19 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`funcionario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`funcionario` (
  `idfuncionario` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador individual de cada funcionário, gerado automáticamente a cada novo funcionário adicionado, não poderá ser nulo pois se trata de uma chave primária, e precisa ter um id com valor',
  `user` VARCHAR(45) NOT NULL COMMENT 'Campo que conterá o usuário de acesso dos funcionários ao sistema, é obrigatório ter esse campo preenchido ao criar um registro nessa tabela.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Campo que conterá o nome do funcionário, necessário para que possa saber quem é o funcionário além dos outros dados',
  `cpf` CHAR(11) NOT NULL COMMENT 'Campo desntinado para a inserção do número de CPF, sem as pontuações, somente números, campo definido como CHAR, para que seja inserido a quantidade certa de números obrigatóriamente, informação obrigatória para que possa se ter registro de algo único do funcionário além de seu id.',
  `email` VARCHAR(255) NOT NULL COMMENT 'Campo destinado a inserção do e-mail do funcionário',
  `funcao` INT NOT NULL COMMENT 'Campo que irá conter todas as funções dos funcionários, sendo cada uma delas um número e seguindo a seguinte ordem:\n1 - Administrador\n2 - Analista\n3 - Técnico\n4 - Atendente\nEstrará pré-definido e sua inserção é obrigatória para definir os niveis de permissão do sistema.',
  `password` CHAR(32) NOT NULL COMMENT 'Campo utilizado para inserir uma senha de acesso ao sistema, utilizado pelos funcionários, seu tipo seria CHAR(32), sendo obrigatório para campos do tipo password.',
  PRIMARY KEY (`idfuncionario`))
COMMENT = 'Tabela que conterá as informações de todos os funcionários que atuam na empresa, que utilizam o software, tendo as informações pessoas do funcionário, assim como os seus dados de acesso ao sistema';


-- -----------------------------------------------------
-- Table `mydb`.`cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`cliente` (
  `idcliente` INT NOT NULL AUTO_INCREMENT COMMENT 'Campo direcionado para a identificação única do cliente, sendo sempre preenchido automáticamente, além de ser a chave primária da tabela.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Campo destinado para o nome completo do cliente.',
  `cpf` CHAR(11) NOT NULL COMMENT 'Campo desntinado para a inserção do número de CPF, sem as pontuações, somente números, campo definido como CHAR, para que seja inserido a quantidade certa de números obrigatóriamente, informação obrigatória para que possa se ter registro de algo único do cliente além de seu id.',
  `email` VARCHAR(255) NOT NULL COMMENT 'Campo destinado para a inserção do e-mail do cliente, campo obrigatório pois ao fim da manutenção, será necessário enviar um e-mail ao cliente informado-o sobre. Validação do que será digitado no campo será feita pelo back-end.',
  `telefone` VARCHAR(11) NOT NULL COMMENT 'Campo destinado para a inserção do número de telefone do cliente, é necessário DD e o número com o 9 e apenas os números do telefone, dado necessário, pois em certo momento será necessário ligar para o cliente para informa-lo do término da manutenção.',
  PRIMARY KEY (`idcliente`))
COMMENT = 'Tabela com o intuito de cadastrar novos clientes na assistência técnica, sendo necessário os dados apontados no requisitos, além de um identificador individual de cada cliente.';


-- -----------------------------------------------------
-- Table `mydb`.`manutencao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`manutencao` (
  `atendimento` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificação individual do atendimento, que contém a chave primária, e é preenchido automáticamente a cada atendimento novo.',
  `equipamento` INT NOT NULL COMMENT 'Campo destinado para a seleção do tipo de equipamento que será consertado na manutenção em questão, será do tipo INT, pois cada númeração do campo será um tipo de equipamento para selecionar, seguindo a ordem:\n1 - Computador\n2 - Smartphone\n3 - Notebook\n4 - Tablet\n5 - Impressoras',
  `marca` VARCHAR(45) NOT NULL COMMENT 'Local designado para a inserção da marca do equipamento.',
  `modelo` VARCHAR(45) NOT NULL COMMENT 'Local onde será adicionado a descrição do modelo do equipamento.',
  `defeito` VARCHAR(255) NOT NULL COMMENT 'Campo onde toda a descrição do defeito do equipamento na hora do orçamento será adicionado, poderá ser utilizado para apontar os problemas no momento em que o cliente tiver uma solicitação de garantia aprovada.',
  `entrega` DATE NULL COMMENT 'Local para definir a data de entrega do equipamento após o conserto estar concluido, tendo a data completa, ele não é obrigatório no inicio, pois essa informação só é definida ao final do conserto.',
  `status` INT NOT NULL COMMENT 'Local designado para adicionar a situação de cada atendimento, definido com status, onde o tipo sendo um INT, cada situação de atendimento seria um número, já pré-definido da seguinte forma:\n1 - Em análise\n2 - Aguardando aprovação\n3 - Em aberto\n4 - Recusado\n5 - Em atendimento\n6 - Em teste\n7 - Finalizado\n8 - Cancelado\n9 - Equipamento entregue\n10 - Em análise de garantia\n11 - Solicitação negada',
  `cliente_idcliente` INT NOT NULL COMMENT 'Local com a identificação do cliente que está com o equipamento em manutenção, sendo o mesmo id do cliente que foi cadastrado.',
  `funcionario_idfuncionario` INT NULL COMMENT 'Identificação do funcionário que está solucionando o problema do cliente, sendo ele um técnico ou um analista.',
  PRIMARY KEY (`atendimento`),
  INDEX `fk_manutencao_cliente_idx` (`cliente_idcliente` ASC),
  INDEX `fk_manutencao_funcionario1_idx` (`funcionario_idfuncionario` ASC),
  CONSTRAINT `fk_manutencao_cliente`
    FOREIGN KEY (`cliente_idcliente`)
    REFERENCES `mydb`.`cliente` (`idcliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_manutencao_funcionario1`
    FOREIGN KEY (`funcionario_idfuncionario`)
    REFERENCES `mydb`.`funcionario` (`idfuncionario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'Tabela que terá todas as informações referentes a manutenção, tendo os dados do equipamento do cliente, assim como o defeito, o cliente e o responsável técnico pela manutenção.\n									';


-- -----------------------------------------------------
-- Table `mydb`.`procedimento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`procedimento` (
  `idprocedimento` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador do procedimento de conserto, o mesmo ainda sendo a chave primária da tabela, e a medida que forem sendo criados novos procedimentos, ele se auto preencherá',
  `nome` VARCHAR(255) NOT NULL COMMENT 'Campo destinado para a inserção do nome do procedimento de conserto, o mesmo será referenciado pelo idprocedimento, e o seu preenchimento é obrigatório',
  PRIMARY KEY (`idprocedimento`))
COMMENT = 'Tabela que conterá os procedimentos de solução que poderão ser utilizados na hora de uma resposta do analista há um orçamento, irá abranger todos os equipamentos, terá uma identificação individual de cada um (id), e o nome do procedimento (nome)';


-- -----------------------------------------------------
-- Table `mydb`.`manutencao_has_procedimento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`manutencao_has_procedimento` (
  `manutencao_atendimento` INT NOT NULL COMMENT 'Identificação da manutenção que terá os procedimentos especificados da tabela procedimento, gerado automáticamente para que certa manutenção, tenha os respectivos procedimentos',
  `procedimento_idprocedimento` INT NOT NULL COMMENT 'Identificação do procedimento que estará na sua respectiva manutenção, que será ligada pelo back-end',
  `valor` DECIMAL(5,2) NOT NULL COMMENT 'Campo que indicará o valor de cada procedimento, poderá ser adicionado separadamente a cada tipo de procedimento',
  `is_realizado` INT NOT NULL COMMENT 'Campo destinado a ter o status do procedimento, ou seja, se ele já foi realizado no atendimento, ou não, os status são denominados conforme abaixo:\n0 - Procedimento ainda não realizado\n1 - Procedimento realizado\n',
  PRIMARY KEY (`manutencao_atendimento`, `procedimento_idprocedimento`),
  INDEX `fk_manutencao_has_procedimento_procedimento1_idx` (`procedimento_idprocedimento` ASC) ,
  INDEX `fk_manutencao_has_procedimento_manutencao1_idx` (`manutencao_atendimento` ASC) ,
  CONSTRAINT `fk_manutencao_has_procedimento_manutencao1`
    FOREIGN KEY (`manutencao_atendimento`)
    REFERENCES `mydb`.`manutencao` (`atendimento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_manutencao_has_procedimento_procedimento1`
    FOREIGN KEY (`procedimento_idprocedimento`)
    REFERENCES `mydb`.`procedimento` (`idprocedimento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'Tabela que irá intermediar a tabela procedimento e manutencao, onde irá referenciar o procedimento de conserto, com a sua respectiva manutenção, além de adicionar  o preço.';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
